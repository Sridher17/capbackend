{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS\\\\mydress\\\\src\\\\components\\\\Suggestion.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Paper, Typography, Grid } from '@mui/material';\nimport PaletteIcon from '@mui/icons-material/Palette';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Suggestion = () => {\n  _s();\n  const [suggestedColors, setSuggestedColors] = useState([]);\n\n  // Fetch color suggestions from the API\n  useEffect(() => {\n    const fetchSuggestions = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/suggestions'); // Replace with your backend endpoint\n        const data = await response.json();\n        setSuggestedColors(data.colors); // Assuming API returns { colors: ['Red', 'Blue', 'Yellow'] }\n      } catch (error) {\n        console.error('Error fetching color suggestions:', error);\n      }\n    };\n    fetchSuggestions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      padding: 2,\n      marginTop: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      fontFamily: \"Roboto\",\n      children: \"Today's Dress Color Suggestions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: suggestedColors.map((color, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            padding: 2,\n            backgroundColor: color.toLowerCase(),\n            color: '#fff',\n            textAlign: 'center',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(PaletteIcon, {\n            sx: {\n              marginRight: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: color\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Suggestion, \"H4fut8pXdBVJlyjg5VPI2Z9LPkM=\");\n_c = Suggestion;\nexport default Suggestion;\nvar _c;\n$RefreshReg$(_c, \"Suggestion\");","map":{"version":3,"names":["React","useEffect","useState","Paper","Typography","Grid","PaletteIcon","jsxDEV","_jsxDEV","Suggestion","_s","suggestedColors","setSuggestedColors","fetchSuggestions","response","fetch","data","json","colors","error","console","sx","padding","marginTop","children","variant","gutterBottom","fontFamily","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","map","color","index","item","xs","backgroundColor","toLowerCase","textAlign","display","justifyContent","alignItems","marginRight","_c","$RefreshReg$"],"sources":["D:/VS/mydress/src/components/Suggestion.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Paper, Typography, Grid } from '@mui/material';\r\nimport PaletteIcon from '@mui/icons-material/Palette';\r\n\r\nconst Suggestion = () => {\r\n  const [suggestedColors, setSuggestedColors] = useState([]);\r\n\r\n  // Fetch color suggestions from the API\r\n  useEffect(() => {\r\n    const fetchSuggestions = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/suggestions'); // Replace with your backend endpoint\r\n        const data = await response.json();\r\n        setSuggestedColors(data.colors); // Assuming API returns { colors: ['Red', 'Blue', 'Yellow'] }\r\n      } catch (error) {\r\n        console.error('Error fetching color suggestions:', error);\r\n      }\r\n    };\r\n\r\n    fetchSuggestions();\r\n  }, []);\r\n\r\n  return (\r\n    <Paper sx={{ padding: 2, marginTop: 8 }}>\r\n      <Typography variant=\"h6\" gutterBottom fontFamily=\"Roboto\">\r\n        Today's Dress Color Suggestions\r\n      </Typography>\r\n      <Grid container spacing={2}>\r\n        {suggestedColors.map((color, index) => (\r\n          <Grid item xs={4} key={index}>\r\n            <Paper\r\n              sx={{\r\n                padding: 2,\r\n                backgroundColor: color.toLowerCase(),\r\n                color: '#fff',\r\n                textAlign: 'center',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <PaletteIcon sx={{ marginRight: 1 }} />\r\n              <Typography>{color}</Typography>\r\n            </Paper>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Suggestion;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,KAAK,EAAEC,UAAU,EAAEC,IAAI,QAAQ,eAAe;AACvD,OAAOC,WAAW,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACAD,SAAS,CAAC,MAAM;IACd,MAAMY,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;QACnE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,kBAAkB,CAACI,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC;IAEDN,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA,CAACL,KAAK;IAACkB,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAE,CAAE;IAAAC,QAAA,gBACtChB,OAAA,CAACJ,UAAU;MAACqB,OAAO,EAAC,IAAI;MAACC,YAAY;MAACC,UAAU,EAAC,QAAQ;MAAAH,QAAA,EAAC;IAE1D;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACbvB,OAAA,CAACH,IAAI;MAAC2B,SAAS;MAACC,OAAO,EAAE,CAAE;MAAAT,QAAA,EACxBb,eAAe,CAACuB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBAChC5B,OAAA,CAACH,IAAI;QAACgC,IAAI;QAACC,EAAE,EAAE,CAAE;QAAAd,QAAA,eACfhB,OAAA,CAACL,KAAK;UACJkB,EAAE,EAAE;YACFC,OAAO,EAAE,CAAC;YACViB,eAAe,EAAEJ,KAAK,CAACK,WAAW,CAAC,CAAC;YACpCL,KAAK,EAAE,MAAM;YACbM,SAAS,EAAE,QAAQ;YACnBC,OAAO,EAAE,MAAM;YACfC,cAAc,EAAE,QAAQ;YACxBC,UAAU,EAAE;UACd,CAAE;UAAApB,QAAA,gBAEFhB,OAAA,CAACF,WAAW;YAACe,EAAE,EAAE;cAAEwB,WAAW,EAAE;YAAE;UAAE;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvCvB,OAAA,CAACJ,UAAU;YAAAoB,QAAA,EAAEW;UAAK;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B;MAAC,GAdaK,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAetB,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEZ,CAAC;AAACrB,EAAA,CA7CID,UAAU;AAAAqC,EAAA,GAAVrC,UAAU;AA+ChB,eAAeA,UAAU;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}